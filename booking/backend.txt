module.exports = async function (context, req) {
    const fetch = (...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args));

    context.log("üîß Function started");

    const defaultHeaders = {
        "Content-Type": "application/json",
        "Access-Control-Allow-Origin": "*"
    };

    try {
        if (req.method === "OPTIONS") {
            context.res = {
                status: 204,
                headers: defaultHeaders
            };
            return;
        }

        if (!req.body) {
            context.res = {
                status: 400,
                body: JSON.stringify({ error: "Request body missing" }),
                headers: defaultHeaders
            };
            return;
        }

        const booking = req.body;
        context.log("üì• Booking received:", booking);

        const requiredFields = ['name', 'email', 'phone', 'vehicleType', 'serviceType', 'date', 'time'];
        const missing = requiredFields.filter(f => !booking[f]);

        if (missing.length > 0) {
            context.res = {
                status: 400,
                body: JSON.stringify({ error: "Missing fields", missing }),
                headers: defaultHeaders
            };
            return;
        }

        // ‚úÖ Call Logic App
        const logicAppUrl = 'https://prod-18.northcentralus.logic.azure.com:443/workflows/b96b44c4a70b4b89948877873a5a4e80/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=ECp64mRbYMEdjYOOV9uP0K-JdNDdV2FNANHk1g3raf4'; // Replace this

        try {
            const response = await fetch(logicAppUrl, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(booking)
            });

            context.log("üì® Logic App responded:", response.status);

            if (!response.ok) {
                const errText = await response.text();
                context.log.error("‚ö†Ô∏è Logic App error:", errText);
            }
        } catch (fetchErr) {
            context.log.error("‚ùå Failed to call Logic App:", fetchErr.message);
        }

        // ‚úÖ Success Response
        context.res = {
            status: 200,
            body: JSON.stringify({
                message: "Booking received and Logic App triggered.",
                booking,
                timestamp: new Date().toISOString()
            }),
            headers: defaultHeaders
        };

    } catch (err) {
        context.log.error("‚ùå FATAL ERROR:", err);

        context.res = {
            status: 500,
            body: JSON.stringify({ error: "Internal server error", details: err.message }),
            headers: defaultHeaders
        };
    }
};
